#+TITLE: SQL Cheat Sheet

* Distinct
#+BEGIN_SRC sql
SELECT DISTINCT Country FROM Customers;
#+END_SRC


#+BEGIN_SRC sql
SELECT COUNT(DISTINCT Country)
FROM Customers;
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(*) AS DistinctCountries
FROM (
        SELECT DISTINCT Country
        FROM Customers
     );
#+END_SRC 

* WHERE
#+BEGIN_SRC sql
SELECT <column1>, <column2>, ..., <columnN>
FROM   <table>
WHERE  <condition>
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Mexico';
#+END_SRC

Text Field should be in '', numeric field should not.
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerID=1
#+END_SRC

Operators

| Operator | Description                                                                 |
|----------+-----------------------------------------------------------------------------|
| =        | Equal                                                                       |
| <>       | Not equal. Note: In some versions of SQL this operator may be written as != |
| >        | Greater than                                                                |
| <        | Less than                                                                   |
| >=       | Greater than or equal                                                       |
| <=       | Less than or equal                                                          |
| BETWEEN  | Between an inclusive range                                                  |
| LIKE     | Search for a pattern                                                        |
| IN       | To specify multiple possible values for a column                            |

* AND, NOT, OR

AND Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE condition1 
AND   condition2
AND   condition3;
#+END_SRC

OR Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE condition1 
OR    condition2
OR    condition3;
#+END_SRC

NOT Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE NOT condition1;
#+END_SRC

AND Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
#+END_SRC

OR Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE City='Berlin' OR City='München';
#+END_SRC

NOT Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE NOT Country='Germany';
#+END_SRC

Combining AND, OR and NOT

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München');
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE NOT Country='GERMANY' AND NOT Country='USA';
#+END_SRC

* ORDER BY Keyword

#+BEGIN_SRC sql
SELECT <column1>, <column2>, ..
FROM   <table_name>
ORDER BY <column1>, <column2>, ... ASC|DESC
#+END_SRC

Example
#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country DESC;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country, CustomerName;
#+END_SRC

#+BEGIN_SRC sql
SELECT Country, CustomerID FROM Customers
ORDER BY Country ASC, CustomerID DESC ;
#+END_SRC

* INSERT INTO

Syntax
#+BEGIN_SRC sql
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
#+END_SRC

Example
#+BEGIN_SRC sql
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
#+END_SRC

#+BEGIN_SRC sql
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');
#+END_SRC

* NULL Value
#+BEGIN_QUOTE
A field with a =NULL= means a field with =no-value=
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
#+END_QUOTE

test for null values?
#+BEGIN_SRC sql
SELECT <column_names>
FROM   <table_names>
WHERE <column_name> IS NULL;
#+END_SRC


#+BEGIN_SRC sql
SELECT <column_names>
FROM   <table_names>
WHERE <column_name> IS NOT NULL;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT LastName, FirstName, Address FROM Persons
WHERE  Address   IS NULL
#+END_SRC

The =IS NOT NULL= Operator
#+BEGIN_SRC sql
SELECT LastName, FirstName, Address FROM Persons
WHERE Address IS NOT NULL;
#+END_SRC

* Update

Syntax
#+BEGIN_SRC sql
UPDATE <table_name>
SET <column1> = value1, <column2> = value2, ...
WHERE <condition>;
#+END_SRC

Example

#+BEGIN_SRC sql
UPDATE Customers
SET    ContactName = 'Alfred Schimdt',
       City        = 'Frankfurt'
WHERE  CustomerID  = 1;
#+END_SRC

Update Mulitple Records
#+BEGIN_SRC sql
UPDATE Customers
SET    ContactName = 'Juan'
WHERE  Country     = 'Mexico';
#+END_SRC

* Delete
DELETE syntax
#+BEGIN_SRC sql
DELETE FROM table_name
WHERE condition;
#+END_SRC

Sql Delete Example
#+BEGIN_SRC sql
DELETE FROM Customers
WHERE CustomerName='Alfreds Futterkiste';
#+END_SRC

Delete All Records - data will be deleted but table structures, attributes and indexes will be intact.
#+BEGIN_SRC sql
DELETE FROM <table_name>;
# or
DELETE * FROM <table_name>;
#+END_SRC
* TOP, LIMIT, ROWNUM
*TOP* => number of records to return.
#+BEGIN_SRC sql
SELECT <column_name(s)>
FROM   <table_name(s)>
WHERE  condition
LIMIT  number;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT TOP 3 * FROM Customers;
# or
SELECT * FROM Customers
LIMIT 3;
# or 
SELECT * FROM Customers
WHERE ROWNUM <=3 ;
#+END_SRC

* MIN() or MAX()

MIN() Syntax
#+BEGIN_SRC sql
SELECT MIN(<column_name>)
FROM   <table_name>
WHERE  <condition>;
#+END_SRC

MAX() Syntax
#+BEGIN_SRC sql
SELECT MAX(<column_name>)
FROM   <table_name>
WHERE  <condition>;
#+END_SRC

MIN() Example
#+BEGIN_SRC sql
SELECT MIN(Price) AS SmallestPrice
FROM   Products;
#+END_SRC

MAX() Example
#+BEGIN_SRC sql
SELECT MAX(Price) AS LargestPrice
FROM   Products;
#+END_SRC
* COUNT(), AVG(), and SUM()
Syntax
#+BEGIN_SRC sql
SELECT COUNT(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC
#+BEGIN_SRC sql
SELECT AVG(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC
#+BEGIN_SRC sql
SELECT SUM(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC

Count() Example
#+BEGIN_SRC sql
SELECT COUNT(ProductID)
FROM Products;
#+END_SRC

AVG() Example
#+BEGIN_SRC sql
SELECT AVG(Price)
FROM Products;
#+END_SRC

SUM() Example
#+BEGIN_SRC sql
SELECT SUM(Quantity)
FROM OrderDetails;
#+END_SRC

* LIKE

Syntax
#+BEGIN_SRC sql
# _ represents a single character
# % represents 0|1|1+ character
SELECT <column1>, <column2>, <column3>
FROM   <table_name>
WHERE  <columnN> LIKE <pattern>;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE 'a_%_%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';
#+END_SRC

* IN

Syntax
#+BEGIN_SRC sql
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);
#+END_SRC

#+BEGIN_SRC sql
SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);
#+END_SRC

* BETWEEN

#+BEGIN_SRC sql
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;
#+END_SRC

Between with IN example
#+BEGIN_SRC sql
SELECT * FROM Products
WHERE (Price BETWEEN 10 AND 20)
AND NOT CatergoryID IN (1,2,3);
#+END_SRC

Between text values example
#+BEGIN_SRC sql
SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;
#+END_SRC

#+BEGIN_SRC sql
SELECT *
FROM `objects`
WHERE (date_field BETWEEN '2010-01-30 14:15:55' AND '2010-09-29 10:15:55')
#+END_SRC

* Alias
#+BEGIN_SRC sql
SELECT column_name AS alias_name
FROM table_name;
#+END_SRC

#+BEGIN_SRC sql
SELECT column_name(s)
FROM table_name AS alias_name;
#+END_SRC

#+BEGIN_SRC sql
SELECT CustomerID as ID, CustomerName AS Customer
FROM Customers;
# OR
# It requires double quotation marks or square brackets if the alias name contains spaces:
SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;
#+END_SRC

The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
#+BEGIN_SRC sql
SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;
#+END_SRC

table alias
#+BEGIN_SRC sql
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;
#+END_SRC

* JOIN
[[https://i.stack.imgur.com/1UKp7.png]]

left join =A U (A∩B)=
#+BEGIN_SRC sql
SELECT    <select_list>
FROM      <table_A>
LEFT JOIN <table_B> 
          ON <table_A>.id = <table_B>.id
#+END_SRC

left join without common data =A ∩ (A∩B)=
#+BEGIN_SRC sql
SELECT    <select_list>
FROM      <table_A>
LEFT JOIN <table_B>
       ON <table_A>.id = <table_B>.id
    WHERE <table_B>.id IS NULL;
#+END_SRC

right join =B U (A∩B)=
#+BEGIN_SRC sql
SELECT    <select_list>
FROM      <table_A>
RIGHT JOIN <table_B> 
          ON <table_A>.id = <table_B>.id
#+END_SRC

right join without common data =B ∩ (A∩B)=
#+BEGIN_SRC sql
SELECT    <select_list>
FROM      <table_A>
RIGHT JOIN <table_B>
       ON <table_A>.id = <table_B>.id
    WHERE <table_A>.id IS NULL;
#+END_SRC

inner join =A∩B=
#+BEGIN_SRC sql
SELECT     <select_list>
FROM       <table_A>
INNER JOIN <table_B>
        ON <table_A>.id = <table_B>.id
#+END_SRC

full outer join =AUB=
#+BEGIN_SRC sql
SELECT          <select_list>
FROM            <table_A>
FULL OUTER JOIN <table_B>
             ON <table_A>.id = <table_B>.id
#+END_SRC

full outer join exclusive  =U\(AUB)=
#+BEGIN_SRC sql
SELECT          <select_list>
FROM            <table_A>   
FULL OUTER JOIN <table_B>
             ON <table_A>.id = <table_B>.id
          WHERE <table_A>.id IS NULL
	     OR <table_B>.id IS NULL
#+END_SRC

sql self join
#+BEGIN_SRC sql
SELECT A.CustomerName as c1, B.CustomerName as c2, A.City
FROM   <table_A> AS A , <table_B> as B
WHERE  A.id <> B.id
AND    A.City = B.City
ORDER BY A.City
#+END_SRC

at the time of join the structure becomes like this ? Need verification
[[./images/after join table structure.png]]

* Union
#+BEGIN_QUOTE
The UNION operator is used to combine the result-set of two or more SELECT statements.

- Each SELECT statement within UNION must have the same number of columns
- The columns must also have similar data types
- The columns in each SELECT statement must also be in the same order
#+END_QUOTE

*Union ALL*: The Union operator selects only distinct values by default. To allow duplicate values, use =UNION ALL=.
#+BEGIN_SRC sql
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;
#+END_SRC

sql =union= exmaple:
#+BEGIN_SRC sql
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;
#+END_SRC

sql =union all= with example:
#+BEGIN_SRC sql
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;
#+END_SRC

#+BEGIN_SRC sql
SELECT 'Customer' As Type, ContactName, City, Country
FROM Customers
UNION
SELECT 'Supplier', ContactName, City, Country
FROM Suppliers;
#+END_SRC
* GROUP BY
Syntax
#+BEGIN_SRC sql
SELECT   <column_name(s)>
FROM     <table_name>
GROUP BY <column_name(s)>
ORDER BY <column_name(s)>
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;
#+END_SRC

#+BEGIN_SRC sql
SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;
#+END_SRC


* HAVING
#+BEGIN_QUOTE
The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.
#+END_QUOTE

Syntax
#+BEGIN_SRC sql
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;
#+END_SRC

#+BEGIN_SRC sql
SELECT Employees.LastName,
       COUNT(Orders.OrderID) AS NumberOfOrders
FROM   (
         Orders 
	 INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
       )
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;
#+END_SRC

The following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:

#+BEGIN_SRC sql
SELECT     Employees.LastName,
           COUNT(Orders.OrderID) AS NumberOfOrders
FROM       Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
GROUP BY   LastName
HAVING     COUNT(Orders.OrderID) > 25;
#+END_SRC

