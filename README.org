#+TITLE: SQL Cheat Sheet

* Distinct
#+BEGIN_SRC sql
SELECT DISTINCT Country FROM Customers;
#+END_SRC


#+BEGIN_SRC sql
SELECT COUNT(DISTINCT Country)
FROM Customers;
#+END_SRC

#+BEGIN_SRC sql
SELECT COUNT(*) AS DistinctCountries
FROM (
        SELECT DISTINCT Country
        FROM Customers
     );
#+END_SRC 

* WHERE
#+BEGIN_SRC sql
SELECT <column1>, <column2>, ..., <columnN>
FROM   <table>
WHERE  <condition>
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Mexico';
#+END_SRC

Text Field should be in '', numeric field should not.
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerID=1
#+END_SRC

Operators

| Operator | Description                                                                 |
|----------+-----------------------------------------------------------------------------|
| =        | Equal                                                                       |
| <>       | Not equal. Note: In some versions of SQL this operator may be written as != |
| >        | Greater than                                                                |
| <        | Less than                                                                   |
| >=       | Greater than or equal                                                       |
| <=       | Less than or equal                                                          |
| BETWEEN  | Between an inclusive range                                                  |
| LIKE     | Search for a pattern                                                        |
| IN       | To specify multiple possible values for a column                            |

* AND, NOT, OR

AND Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE condition1 
AND   condition2
AND   condition3;
#+END_SRC

OR Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE condition1 
OR    condition2
OR    condition3;
#+END_SRC

NOT Syntax
#+BEGIN_SRC sql
SELECT <column1>, <column2>, <column3>
FROM <table_name>,
WHERE NOT condition1;
#+END_SRC

AND Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
#+END_SRC

OR Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE City='Berlin' OR City='München';
#+END_SRC

NOT Example
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE NOT Country='Germany';
#+END_SRC

Combining AND, OR and NOT

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München');
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE NOT Country='GERMANY' AND NOT Country='USA';
#+END_SRC

* ORDER BY Keyword

#+BEGIN_SRC sql
SELECT <column1>, <column2>, ..
FROM   <table_name>
ORDER BY <column1>, <column2>, ... ASC|DESC
#+END_SRC

Example
#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country DESC;
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
ORDER BY Country, CustomerName;
#+END_SRC

#+BEGIN_SRC sql
SELECT Country, CustomerID FROM Customers
ORDER BY Country ASC, CustomerID DESC ;
#+END_SRC

* INSERT INTO

Syntax
#+BEGIN_SRC sql
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
#+END_SRC

Example
#+BEGIN_SRC sql
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
#+END_SRC

#+BEGIN_SRC sql
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');
#+END_SRC

* NULL Value
#+BEGIN_QUOTE
A field with a =NULL= means a field with =no-value=
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
#+END_QUOTE

test for null values?
#+BEGIN_SRC sql
SELECT <column_names>
FROM   <table_names>
WHERE <column_name> IS NULL;
#+END_SRC


#+BEGIN_SRC sql
SELECT <column_names>
FROM   <table_names>
WHERE <column_name> IS NOT NULL;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT LastName, FirstName, Address FROM Persons
WHERE  Address   IS NULL
#+END_SRC

The =IS NOT NULL= Operator
#+BEGIN_SRC sql
SELECT LastName, FirstName, Address FROM Persons
WHERE Address IS NOT NULL;
#+END_SRC

* Update

Syntax
#+BEGIN_SRC sql
UPDATE <table_name>
SET <column1> = value1, <column2> = value2, ...
WHERE <condition>;
#+END_SRC

Example

#+BEGIN_SRC sql
UPDATE Customers
SET    ContactName = 'Alfred Schimdt',
       City        = 'Frankfurt'
WHERE  CustomerID  = 1;
#+END_SRC

Update Mulitple Records
#+BEGIN_SRC sql
UPDATE Customers
SET    ContactName = 'Juan'
WHERE  Country     = 'Mexico';
#+END_SRC

* Delete
DELETE syntax
#+BEGIN_SRC sql
DELETE FROM table_name
WHERE condition;
#+END_SRC

Sql Delete Example
#+BEGIN_SRC sql
DELETE FROM Customers
WHERE CustomerName='Alfreds Futterkiste';
#+END_SRC

Delete All Records - data will be deleted but table structures, attributes and indexes will be intact.
#+BEGIN_SRC sql
DELETE FROM <table_name>;
# or
DELETE * FROM <table_name>;
#+END_SRC
* TOP, LIMIT, ROWNUM
*TOP* => number of records to return.
#+BEGIN_SRC sql
SELECT <column_name(s)>
FROM   <table_name(s)>
WHERE  condition
LIMIT  number;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT TOP 3 * FROM Customers;
# or
SELECT * FROM Customers
LIMIT 3;
# or 
SELECT * FROM Customers
WHERE ROWNUM <=3 ;
#+END_SRC

* MIN() or MAX()

MIN() Syntax
#+BEGIN_SRC sql
SELECT MIN(<column_name>)
FROM   <table_name>
WHERE  <condition>;
#+END_SRC

MAX() Syntax
#+BEGIN_SRC sql
SELECT MAX(<column_name>)
FROM   <table_name>
WHERE  <condition>;
#+END_SRC

MIN() Example
#+BEGIN_SRC sql
SELECT MIN(Price) AS SmallestPrice
FROM   Products;
#+END_SRC

MAX() Example
#+BEGIN_SRC sql
SELECT MAX(Price) AS LargestPrice
FROM   Products;
#+END_SRC
* COUNT(), AVG(), and SUM()
Syntax
#+BEGIN_SRC sql
SELECT COUNT(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC
#+BEGIN_SRC sql
SELECT AVG(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC
#+BEGIN_SRC sql
SELECT SUM(<column_name>)
FROM   <table_name>
WHERE  <condition>
#+END_SRC

Count() Example
#+BEGIN_SRC sql
SELECT COUNT(ProductID)
FROM Products;
#+END_SRC

AVG() Example
#+BEGIN_SRC sql
SELECT AVG(Price)
FROM Products;
#+END_SRC

SUM() Example
#+BEGIN_SRC sql
SELECT SUM(Quantity)
FROM OrderDetails;
#+END_SRC

* LIKE

Syntax
#+BEGIN_SRC sql
# _ represents a single character
# % represents 0|1|1+ character
SELECT <column1>, <column2>, <column3>
FROM   <table_name>
WHERE  <columnN> LIKE <pattern>;
#+END_SRC

Examples
#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName LIKE 'a_%_%';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';
#+END_SRC

#+BEGIN_SRC sql
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';
#+END_SRC
